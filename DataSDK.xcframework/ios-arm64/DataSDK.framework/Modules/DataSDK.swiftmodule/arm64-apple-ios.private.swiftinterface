// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DataSDK
import Common
@_exported import DataSDK
import FirebaseCore
import FirebaseDatabase
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum RequestMethod : Swift.String {
  case delete
  case get
  case patch
  case post
  case put
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RequestError : Swift.Error {
  case decode
  case invalidURL
  case noResponse
  case unauthorized
  case unexpectedStatusCode
  case unknown
  public static func == (a: DataSDK.RequestError, b: DataSDK.RequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Environment {
}
public struct Endpoint {
  public init(url: Swift.String, method: DataSDK.RequestMethod, header: [Swift.String : Swift.String]? = nil, body: [Swift.String : Swift.String]? = nil)
}
public protocol Networkable {
  #if compiler(>=5.3) && $AsyncAwait
  func sendRequest<T>(endpoint: DataSDK.Endpoint, responseModel: T.Type) async -> Swift.Result<T, DataSDK.RequestError> where T : Swift.Decodable
  #endif
}
@available(iOS 15.0, *)
public class Network : DataSDK.Networkable {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func sendRequest<T>(endpoint: DataSDK.Endpoint, responseModel: T.Type) async -> Swift.Result<T, DataSDK.RequestError> where T : Swift.Decodable
  #endif
  @objc deinit
}
public struct ARMapData {
  public init()
  public func getMap(id: Swift.String, completion: @escaping (Common.ARMap?, (any Swift.Error)?) -> Swift.Void)
  public static func configure()
}
extension DataSDK.RequestMethod : Swift.Equatable {}
extension DataSDK.RequestMethod : Swift.Hashable {}
extension DataSDK.RequestMethod : Swift.RawRepresentable {}
extension DataSDK.RequestError : Swift.Equatable {}
extension DataSDK.RequestError : Swift.Hashable {}
